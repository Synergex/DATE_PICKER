FUNCTION DATE_PICKER
	iRow		,N				; 1 optional screen row position default 10
	iCol		,N				; 2 optional screen col position default 30
	iFType		,A				; 3 optional input type Y, M or D (default Y = YYYYMMDD) (D = DDMMYYYY) or (M = MMDDYYYY)
							;   2nd Character is mask character / or - for MM-DD-YYYY or MM/DD/YYYY
							;   Y/ Y- M/ M- D/ D-, mask can be any character including ~ for space
							;   incoming Default Date will be in same format character as set by iFType
	iHeading	,A				; 4 Optional Heading for Window "Calendar"
	iDefaultDate	,A				; 5 Optional default value for date, Calendar lands on this date on initiation
	iDType		,A				; 6 Optional Date format for iDefaultDate parameter, same settings as iFTYPE without mask character
	oNumericDate	,N				; 7 Optional return value of date field YYYYMMDD D8 or 
							;   -1 = EXIT, -2 = ESC, -3 = CLOSED X CLICK, -4 = TIMEOUT

; This function returns an Alpha containing the date selected by user
; or the error/status condition if timeout or user exit occurs
;
; The alpha return value can be formatted using the iFType field (parameter 3)
; iFType can be:
;	Y  	= YYYYMMDD   format
;	M  	= MMDDYYYY   format
;	D  	= DDMMYYYY   format
; iFType can also contain a formatting character such as - / + ~ (~ has special meaning in that it translates to space)
;	Y/ 	= YYYY/MM/DD
;	M/ 	= MM/DD/YYYY format
;	D- 	= DD-MM-YYYY format
;	D~	= DD MM YYYY format (note spaces, not ~)
;
; if the user exits then the returned alpha value will be:
;	O_EXIT  = Pressed Exit Button
;	ESC     = Pressed ESC key
;	EXIT    = Clicked on Close X
;	TIMEOUT = Timed out (too long, input expired)
;
; if you pass oNumericDate (parameter 7), it will contain the returned value of date in YYYYMMDD format or
;	the exit status value of
;	-1	= O_EXIT 	Pressed Exit Button
;	-2	= ESC    	Pressed ESC key
;	-3	= EXIT   	Clicked on Close X
;	-4	= TIMEOUT	Timed out (too long)
;
; iRow and iCol are for positioning the Window,
;
; iDefaultDate is a parameter (5) you can pass to have the Calendar land on that date so you can choose which month to start the function.
; if you pass iDefaultDate then it is in the same format as per iFType with or without format characters.
;
; if the Calendar is on the default month (date) then if the user presses Enter it will return the highlighted date in output, formatted as per iFType
;
; child windows (year and month) follow the parent window if the user drags the parent window
; the function works equally in old style DBL (MCBA) code or UI_Toolkit code
;
; The function is Windows only, will NOT work on unix, linux or VMS because of mouse handling.


.INCLUDE "WND:windows.def"
.INCLUDE "WND:tools.def"

.define time_out		,120			; seconds to wait for input before routine returns with timeout status
							; do not use -1 = no timeout, it does not work because u_chr ignores mouse clicks,
							; use 999 for no timeout, routine will not exit on timeout if value = 999 but handles mouse OK

.define exit_key		,'O_EXIT'		; g_entnam value returned from Exit Key,
							; if you are using ui_toolkit then this is your Exit key value, usually O_EXIT
							; however it can be set programmatically

.define default_iFtype		,'Y'			; Default date format
							; Y = YYYYMMDD
							; M = MMDDYYYY
							; D = DDMMYYYY

.define default_iDtype		,'Y'			; Default date format
							; Y = YYYYMMDD
							; M = MMDDYYYY
							; D = DDMMYYYY
							; if you are passing a date numeric field in YYYYMMDD format then best to leave this as Y
							; most dates are stored as YYYYMMDD
RECORD WORK
	LROW			,D3			; local variable for row for date_picker rtn
	LCOL			,D3			; local variable for col for date_picker rtn
	FType			,A2			; date type loaded from iFType  - outgoing date format
	DType			,A2			; Date type loaded from iDType  - incoming date format
	FMT			,A1	@fType+1	; format character / or -
	win_Heading		,A22			; if heading parameter passed

	DefaultDate		,A10			; if default date parameter passed
	DefaultDateYYYY		,A4	@DefaultDate	; YYYY component
	DefaultDateMM		,A2	@DefaultDate+4	; MM   component
	DefaultDateDD		,A2	@DefaultDate+6	; DD   component
;
	DefaultDateUSA_MM	,A2	@DefaultDate	; MM   component
	DefaultDateUSA_DD	,A2	@DefaultDate+2	; DD   component
	DefaultDateUSA_YYYY	,A4	@DefaultDate+4	; YYYY component
;
	DefaultDateAUS_DD	,A2	@DefaultDate	; DD   component
	DefaultDateAUS_MM	,A2	@DefaultDate+2	; MM   component
	DefaultDateAUS_YYYY	,A4	@DefaultDate+4	; YYYY component

	ddate			,d8			; default date, either todays date or default date parameter
	lDate			,d8			; local working variable date (%ndate), over written by default date if passed
	lDateYYYY		,d4	@lDate		; YYYY component
	lDateMM			,d2	@lDate+4	; MM   component
	lDateDD			,d2	@lDate+6	; DD   component
	MY_ROW			,D3			; place to put day data on screen
	MY_COL			,D3			; place to put day data on screen
	INDEX			,D2
	pos			,d3			; working var
	week_day		,d2			; day of week 1 - 7
	pick_wnd_id		,i4			; window id for main date window 
	pick_lc_msid		,i4			; mouse wnd for main date window
	month_wnd_id		,i4			; window if for display month window
	month_lc_msid		,i4			; mouse wnd
	year_wnd_id		,i4			; window id for display year window
	year_lc_msid		,i4			; mouse wnd
	Day_of_Month		,D2			; local variable Day of month being processed (1 - 31)
	pick_year		,d4			; yyyy of date picked
	pick_month		,d2			; mm   of date picked
	pick_day		,d2			; dd   of date picked
	max_days		,d2			; max days in displayed month - calc for leap years etc
	today_pick		,3d2			; which element is array is today dd mm yyyy so we know when they press Enter
	alpha_char		,a1			; variable for u_chr
	wNumericDate		,D8			; work variable to capture date selected yyyymmdd
	tt_chn			,d4			; chn TT: openned on forcleaning up TT characters left in TT Buffer
	tt_text			,a4			; used to find th TT_CHN
	dchar			,d3			; character returned by accept (TT_CHN,)
	W_FMT			,A1
record
	P_FMT			,5A1	,' ','/','-','.'
	env_level		,i4			; we use this to decide if already running in UI_Toolkit or Old DBL style code
	is_cursor		,d1			; is cursor active true or false, we set off cursor and then reset if appropriate
record my_array
	Day_Of_Week_Pick	,d4			; which day did they pick (element 1 - 42 (6 x 7)), 1 to 7
	Day_Array		,42d4			; row/col contains the day of the month by 6 weeks
							; there is an array of fields on the screen 7 days wide and 6 weeks deep
							; this array contains the day number in the month in the screen array
record
				,a9	,' January'
				,a9	,'February'
				,a9	,' March'
				,a9	,' April'
				,a9	,'  May'
				,a9	,'  June'
				,a9	,'  July'
				,a9	,'  August'
				,a9	,'September'
				,a9	,' October'
				,a9	,'November'
				,a9	,'December'
			
record	,X
	month			,12a9	
global common						; set up as global common so mouse routines can see them without need to define in calling program
	pick_lc_col		,d3			; column user mouse clicked on
	pick_lc_row		,d2			; row user mouse clicked on
	pick_lc_wnd_id		,i4			; window ID of mouse click (which window were they in when they clickedleft mouse button)
PROC
	env_level = %E_INFO(D_ENV_LEVEL)			; do we have UI_Toolkit already initialised
								; if non UT_Toolkit then open a UI Window temporarily
	if (env_level.eq.0) u_start (,,,,,,,250)		; Start Chn at 250to avoid clashing with TT: (TT: hopefully openned on a channel less than 250
	e_enter							; this program does not open any channels, just do this so TT:L chn is not closed/cleared by u_start

	WORK =
	IF (%PASSED(iRow)) LROW = iRow				; get passed parameters if any
	IF (%PASSED(iCol)) LCOL = iCol
	IF (.NOT.LROW) LROW = 8					; default position on screen (8,30)
	IF (.NOT.LCOL) LCOL = 30

	IF (%PASSED(iFType)) fType = iFType			; format type

	IF (%PASSED(iDType)) DType = iDType			; format type
	IF (.NOT.DType) DType = fType				; default to iFType
	IF (.NOT.DType) DType = default_iDType			; else default to .defined value
	upcase DType

	IF (.NOT.fType) fType = default_iFType			; default to defined value
	upcase fType

	IF (%PASSED(iHeading)) win_Heading = iHeading
	IF (.NOT.win_Heading) win_Heading = 'Pick Date'		; heading  default box heading

	if (fmt) P_fmt(5) = FMT					; Set upformat array
	IF (%PASSED(iDefaultDate)) DefaultDate = iDefaultDate
	IF (DefaultDate) BEGIN					; clean up the incoming Default Date to standard YYYYMMDD format
		FOR INDEX FROM 1 THRU 5 BEGIN			; check for formats, add 0 in front of month and/or day as required
			W_FMT = P_FMT(INDEX)			; get character for testing format /-.Space
			; check first mm or dd before "/" has leading 0, else add "0"
			IF (%INSTR(1,DefaultDate,W_fmt,POS).EQ.2) DefaultDate = '0' + DefaultDate	
			; check last mm or dd at end of default date has a leading 0 after "/", else add "0"
			IF (DefaultDate(%TRIM(DefaultDate)-1:1).EQ.W_fmt) DefaultDate = DefaultDate(1,%TRIM(DefaultDate)-1) + '0' + DefaultDate(%TRIM(DefaultDate):1)
			; check middle mm dd between "/" and "/" is two characters, else add "0"
			WHILE (%INSTR(1,DefaultDate,W_fmt,POS)+2.eq.%INSTR(pos+1,DefaultDate,W_fmt)) DefaultDate = DefaultDate(1,POS) + '0' + DefaultDate(pos+1,%len(DefaultDate))

			; strip out extra formatting characters after adding back all leading 0's.
			WHILE (%INSTR(1,DefaultDate,W_FMT,POS).LT.%TRIM(DefaultDate).AND.POS) DefaultDate(POS,%LEN(DefaultDate)) = DefaultDate(POS+1,%LEN(DefaultDate))			; STRIP OUT / FORMAT
		END

		if (trim(DefaultDate).eq.7) DefaultDate = '0' + DefaultDate	; add 0 to dmmyyyy to make ddmmyyyy, can only happen in this format
										; can't handle d/m/yyyy or m/d/yyyy, must be dd/mm/yyyy with leading zero
		if (DType.eq.'M') DefaultDate = DefaultDateUSA_YYYY + DefaultDateUSA_MM + DefaultDateUSA_DD		; mmddyyyy North Americal Date
		if (DType.eq.'D') DefaultDate = DefaultDateAUS_YYYY + DefaultDateAUS_MM + DefaultDateAUS_DD		; ddmmyyyy European and Australia/NZ Date
		if (DType.eq.'Y') DefaultDate = DefaultDateYYYY + DefaultDateMM + DefaultDateDD				; yyyymmdd How it should be stored 
		if (DefaultDateMM+DefaultDateDD.ge.'1300') begin
			xcall u_message ('Invalid date format, you need to set idType to suit Date format or invalid Default Date passed in parameter 5, Value passed is ' + iDefaultDate) 
			stop
		end
	END

	XCALL W_PROC (WP_CREATE, pick_wnd_id, "DATE_PICKER", 9,22)
	w_brdr (pick_wnd_id,wb_title,win_Heading)
	xcall w_area(pick_wnd_id, WA_FILL, ' ')			; screen setup
;	u_rend(D_LOAD, D_RND_INP_BCK, 0, 3)			; you may have your own colours and renditions here
;	xcall w_area(pick_wnd_id, WA_COLOR, 3)			;
;	xcall w_disp(pick_wnd_id, wd_color, 3)			;
	XCALL W_PROC (WP_PLACE, pick_wnd_id, lrow,lCol)		; place window
	pick_lc_msid = %xsubr('u_wndevents',D_CREATE,,		; set up mouse clicks for main window
&	D_EVENT_LEFT_CLICK, 'date_picker_click',
&	D_EVENT_LEFT_DBLCLK, 'date_picker_click',
&	D_EVENT_CLOSE,'date_picker_click')
	xcall xsubr('u_wndevents', D_ASSIGN, pick_lc_msid, pick_wnd_id)

	lDate = %ndate						; default date is today, land on this month unless iDefaultDate is passed
	IF (DefaultDate) ldate = DefaultDate			; passed in specific date
	ddate = ldate
	pick_year  = lDateYYYY					; the current year of land date
	pick_month = lDateMM					; the current month
	pick_day   = lDateDD					; the current day of month
	is_cursor  = %e_info (d_state,d_cursor)			; check cursor state
	if (is_cursor.eq.true) W_PROC (WP_CURSOR,WPC_OFF)	; cursor is on, turn off

	TT_CHN =
	for pos from 1 thru 300 begin				; find which chn TT is open on so we can strip out 
		if (%chopen(pos).AND..NOT.TT_CHN) begin		; characters in KB buffer left over from other code to prevent code executing
			xcall filnm (pos,TT_TEXT)		; before user has taken control
			if (TT_TEXT.eq.'TT: ') begin
				TT_CHN = POS			; found TT: Channel
				POS = 300			; complete/stop for loop at 300
			end
		END
	end
	while (tt_chn.and.%ttsts(tt_chn)) accept (tt_chn,dchar)	; clear keyboard buffer

	DefaultDate = 'X'
	WHILE (DefaultDate.EQ.'X') BEGIN
		clear pick_lc_row, pick_lc_col, Day_Array[]								; clear working variables
		CALL SHOW_CALENDAR
		alpha_char =
		pick_lc_wnd_id =  -1											; clear window in which they clicked
		xcall U_CHR(alpha_char, pick_wnd_id,,,,time_Out)

		if (pick_lc_wnd_id.eq.-9) G_ENTNAM =									; Don't return on Timeout if value = 999

		if (time_out.eq.999.and.g_entnam.eq.'O_TIMEOUT') G_ENTNAM =						; Don't return on Timeout if value = 999
		IF (alpha_char.eq.%char(13).and.today_pick(1)) begin							; user can press Enter to get todays date if set
			pick_lc_row = today_pick(1)									; if it is the current month showing
			pick_lc_col = today_pick(2)									; or the specified month passed in
			pick_lc_wnd_id = pick_wnd_id
			while (tt_chn.and.%ttsts(tt_chn)) accept (tt_chn,dchar)						; clear keyboard buffer of <LF> left from <CR>
		end
	
		if (pick_lc_wnd_id.eq.pick_wnd_id) begin 
			if (pick_lc_row.eq.1) begin									; did they click on year line (1)
				if (pick_lc_col.le.8) pick_year = pick_year - 1
				if (pick_lc_col.ge.15) pick_year = pick_year + 1
				if (pick_lc_col.gt.8.and.pick_lc_col.lt.15) call pick_year
				pick_lc_row = 1										; reset value
			end
			if (pick_lc_row.eq.2) begin									; did they click on month line (2)
				if (pick_lc_col.le.8) pick_month = pick_month - 1
				if (pick_lc_col.ge.15) pick_month = pick_month + 1
				if (pick_lc_col.gt.8.and.pick_lc_col.lt.15) call pick_month
				pick_lc_row = 2										; reset value
				if (pick_month.le.0) begin								; clicked previous on Jan so last year
					pick_month = 12
					pick_year = pick_year - 1
				end
				if (pick_month.ge.13) begin								; clicked forward on December so next year
					pick_month = 1
					pick_year = pick_year + 1
				end
			end
			if (pick_lc_row.ge.4.and.pick_lc_col.gt.1.and.pick_lc_col.lt.22) begin				; did they click on day number line (4 - 9)
				Day_Of_Week_Pick = (PICK_LC_COL+1)/3							; where did they click Sun, Mon, Tue etc 1 to 7
				if (Day_Of_Week_Pick) BEGIN								; did they click on a day of the week 1 to 7
					Day_of_Month = Day_Array(Day_Of_Week_Pick + ((pick_lc_row-4)*7))		; choose which day from array, so which day of month was it
					IF (Day_of_Month) begin								; which day of was it an empty element
															; did they click on a day with a date in it
						; did they click on a highlighted day of the month, then un highlight it
						if (today_pick(1)) w_disp (pick_wnd_id,wd_pos,today_pick(1),today_pick(2),%string(today_pick(3),'ZX'))
						; now highlight the day they did click on and display for a short period (0.2 seconds)
						w_disp (pick_wnd_id,wd_pos,pick_lc_row,(Day_Of_Week_Pick-1)*3+2,wd_attr,attr_set+attr_rvrs,%string(Day_of_Month,'ZX'),wd_attr,attr_clr+attr_rvrs,wd_updt)
						sleep 0.2								; pause on screen value selected
		
						; now format the output as per the options
						wNumericDate = (pick_year*10000 + pick_month*100 + Day_of_Month)	; RETURN VALUE IN YYYYMMDD FORMAT
						if (fmt) THEN BEGIN
							CASE fType OF BEGINCASE
							'D': DefaultDate = %STRING((pick_year + pick_month*10000 + Day_of_Month*1000000),'XX'+FMT+'XX'+FMT+'XXXX')	; DDMMYYYY
							'M': DefaultDate = %STRING((pick_month*1000000 + Day_of_Month*10000 + pick_year),'XX'+FMT+'XX'+FMT+'XXXX')	; MMDDYYYY
						  	ENDCASE
						  	ELSE DefaultDate = %STRING((pick_year*10000 + pick_month*100 + Day_of_Month),'XXXX'+FMT+'XX'+FMT+'XX')		; YYYYMMDD
						END ELSE BEGIN
							CASE fType OF BEGINCASE
							'D': DefaultDate = %STRING((pick_year + pick_month*10000 + Day_of_Month*1000000),'XXXXXXXX')			; DDMMYYYY
							'M': DefaultDate = %STRING((pick_month*1000000 + Day_of_Month*10000 + pick_year),'XXXXXXXX')			; MMDDYYYY
							ENDCASE
							ELSE DefaultDate = %STRING((pick_year*10000 + pick_month*100 + Day_of_Month),'XXXXXXXX')			; YYYYMMDD
						END
						WHILE (%INSTR(1,DefaultDate,'~',POS)) DefaultDate(POS:1) =		; remove ~ and replace with space

					end
				END
			end
			g_entnam =									; clear it because it defaults to O_TIMEOUT on mouse click
		end

		; exit for other reason (exit key, timeout etc)						; What key did they press
		if (g_entnam.eq.exit_key) BEGIN								; UI_TOOLKIT DEFINED EXIT KEY
			DefaultDate = exit_key
			wNumericDate = -1
		END
		if (alpha_char.eq.%char(27)) BEGIN							; PRESSED ESC KEY
			DefaultDate = 'ESC'
			wNumericDate = -2
		END
		if (g_entnam.eq.'O_TIMEOUT') BEGIN							; TIMEOUT, 
			DefaultDate = 'TIMEOUT'								; if using UI_TOOLKIT type input and mouse is enabled by calling program
			wNumericDate = -4								; problem is mouse click outside our date_picker window also returns TIMEOUT
		END											; you need to check the Wnd_id of the mouse click (if you have it).
		if (pick_lc_row.eq.-1) BEGIN								; Exit clicked in mouse processing
			DefaultDate = 'EXIT'								; Exit clicked in mouse processing
			wNumericDate = -3
		END
	END

	; something in DefaultDate variable other than X
	; exit from routine
	; -----------------
	xcall w_PROC (wp_remove,pick_wnd_id)								; clean up
	xcall w_PROC (wp_delete,pick_wnd_id)								; clean up
	if (is_cursor.eq.true) W_PROC (WP_CURSOR,WPC_ON)						; set cursor back on if applicable
	e_exit
	w_updt
	if (env_level.eq.0) u_finish									; if not UI_Toolkit in calling program, clean up
	IF (%PASSED(oNumericDate)) oNumericDate = wNumericDate
	freturn (%ATRIM(DefaultDate))									; exit routine with date of Error text
	
SHOW_CALENDAR,
	clear my_array
	w_disp (pick_wnd_id, WD_CLEAR)									; clear calendar screen
	lDate = pick_year * 10000 + pick_month * 100 + 1						; calculate year from components
	max_days = 31
	using pick_month select										; work out last day of month
	(2),  begin											; February
			max_days = 28
			if (pick_year/4*4.eq.pick_year) max_days = 29
			if (pick_year/100*100.eq.pick_year) max_days = 28				; 1700, 1800, 1900 are not a leap years
			if (pick_year/400*400.eq.pick_year) max_days = 29				; 1600, 2000, 2400 are leap years
	      end
	(4),  max_days = 30										; April
	(6),  max_days = 30										; June
	(9),  max_days = 30										; September
	(11), max_days = 30										; November
	endusing

	w_disp (pick_wnd_id,wd_pos,1,1,' < ')								; left arrow to click to go back a year
	w_disp (pick_wnd_id,wd_pos,1,9,' ' + %STRING(pick_year) + ' ')					; Current Year value
	w_disp (pick_wnd_id,wd_pos,1,20,' > ')								; right arrow to go forward

	w_disp (pick_wnd_id,wd_pos,2,1,' < ')								; left arrow to click to go back a month
	w_disp (pick_wnd_id,wd_pos,2,7,' ' + Month(pick_month) + ' ')					; Current month Text (January, September etc)
	w_disp (pick_wnd_id,wd_pos,2,20,' > ')								; right arrow to click to go forward a month

	w_disp (pick_wnd_id,wd_pos,3,1,'  S  M  T  W  T  F  S ')					; Sun Mon Tue ... ... Sat
	week_day = %wkday(lDate/100*100+1)								; what day of week for 1st of month
	my_row = 4
	Day_of_Month = 1

	today_pick(1) =											; clear default <CR> value
	while (Day_of_Month.le.max_days) begin
		for pos from week_day thru 7 begin							; display day of month in week day column (1 to 7)
			my_col = (pos-1)*3 + 2								; work out display column
			if (Day_of_Month.le.max_days) begin							; reached end of month yet
				Day_Of_Week_Pick = (((my_row-4)*7)+pos)					; work out which element of 42 day array to put it in
				Day_Array(Day_Of_Week_Pick) = Day_of_Month					; what day of month 1 - 31 (1 - 28) 
	
				; is it todays date  or the optional default date (Passed value) being displayed, highlight it
				; --------------------------------------------------------------------------------------------
				if (ddate/100.ne.pick_year*100+pick_month.and.pick_year*10000+pick_month*100+Day_of_Month.eq.%ndate).OR.
&				(pick_year*10000+pick_month*100+Day_of_Month.eq.DDATE) then begin
					w_disp (pick_wnd_id,wd_pos,my_row,my_col,wd_attr,attr_set+attr_rvrs,%string(Day_of_Month,'ZX'),wd_attr,attr_clr+attr_rvrs)
					today_pick(1) = my_row						; save highlighted parameters so when Enter pressed
					today_pick(2) = my_col						; we know which one the pass back
					today_pick(3) = Day_of_Month
				end else begin
					w_disp (pick_wnd_id,wd_pos,my_row,my_col,%string(Day_of_Month,'ZX'))	; normal day being displayed
				end
			end
			incr Day_of_Month
		end
		incr my_row										; Start of new week (next line on calendar)
		week_day = 1										; start of new week (Sunday)
	end
	RETURN

pick_year,							; display selection of years around current year value
	e_enter							; try and keep sub window near calling window
	pick_lc_row =
	lrow = %w_info (wif_actprow,pick_wnd_id)		; work out where to put sub window
	lcol = %w_info (wif_actpcol,pick_wnd_id)		; work out where to put sub window

	XCALL W_PROC (WP_CREATE, year_wnd_id, "pick_year", 9,6)
	w_brdr (year_wnd_id,wb_title,'Year')
	xcall w_area(year_wnd_id, WA_FILL, ' ')
	;u_rend(D_LOAD, D_RND_INP_BCK, 0, 3)
	;xcall w_area(pick_wnd_id, WA_COLOR, 3)
	;xcall w_disp(pick_wnd_id, wd_color, 3)
	lrow = lrow - 6
	if (lrow.lt.1) lrow = 1
	lcol = lcol + 7
	XCALL W_PROC (WP_PLACE, year_wnd_id, lrow,lCol)
	; set mouse event
	year_lc_msid = %xsubr('u_wndevents',D_CREATE,,
	&	D_EVENT_LEFT_CLICK, 'pick_year_click',
	&	D_EVENT_LEFT_DBLCLK, 'pick_year_click',
	&	D_EVENT_CLOSE,'pick_year_click')

	xcall xsubr('u_wndevents', D_ASSIGN, year_lc_msid, year_wnd_id)

	for pos from 1 thru 9 w_disp (year_wnd_id,wd_pos,pos,1,' ' + %string(lDate(1,4)+pos-4))

	alpha_char =
	xcall U_CHR(alpha_char, year_wnd_id,,,,time_out)		; wait for input
	if (pick_lc_wnd_id.eq.year_wnd_id.and.pick_lc_row.ge.1.and.pick_lc_row.le.9) pick_year = pick_year + pick_lc_row - 4

	xcall w_PROC (wp_remove,year_wnd_id)			; clean up
	xcall w_PROC (wp_delete,year_wnd_id)			; clean up
	e_exit
	return
	
pick_month,							; display selection of months - All months 1 - 12
	e_enter							; try and keep sub window near calling window
	pick_lc_row =
	lrow = %w_info (wif_actprow,pick_wnd_id)		; work out where to put sub window
	lcol = %w_info (wif_actpcol,pick_wnd_id)		; work out where to put sub window

	XCALL W_PROC (WP_CREATE, month_wnd_id, "pick_month", 12,11)
	w_brdr (month_wnd_id,wb_title,'Month')
	xcall w_area(month_wnd_id, WA_FILL, ' ')
	;u_rend(D_LOAD, D_RND_INP_BCK, 0, 3)
	;xcall w_area(pick_wnd_id, WA_COLOR, 3)
	;xcall w_disp(pick_wnd_id, wd_color, 3)
	lrow = lrow - 6
	if (lrow.lt.1) lrow = 1
	lcol = lcol + 7
	XCALL W_PROC (WP_PLACE, month_wnd_id, lrow,lCol)
	; set mouse event
	year_lc_msid = %xsubr('u_wndevents',D_CREATE,,
	&	D_EVENT_LEFT_CLICK, 'pick_month_click',
	&	D_EVENT_LEFT_DBLCLK, 'pick_month_click',
	&	D_EVENT_CLOSE,'pick_month_click')

	xcall xsubr('u_wndevents', D_ASSIGN, year_lc_msid, month_wnd_id)

	for pos from 1 thru 12 w_disp (month_wnd_id,wd_pos,pos,1,' ' + month(pos))

	alpha_char =
	xcall U_CHR (alpha_char, month_wnd_id,,,,time_out)			; wait for input
	if (pick_lc_wnd_id.eq.month_wnd_id.and.pick_lc_row.ge.1.and.pick_lc_row.le.12) pick_month = pick_lc_row

	xcall w_PROC (wp_remove,month_wnd_id)				; clean up
	xcall w_PROC (wp_delete,month_wnd_id)				; clean up
	e_exit
	return
end
	
function date_picker_click ,^val		;mouse click capture from main date picker screen
	a_resv1		,a		;reserved parameter
	a_resv2		,a		;reserved parameter

	^val(a_wndid)	,i		;window ID
	^val(a_event)	,i		;event code
	^val(a_col)	,i		;column number
	^val(a_row)	,i		;row number
	^val(a_x)	,i		;x pixel position
	^val(a_y)	,i		;y pixel position
	^val(a_flags)	,i		;flags
endparams

record 
	hwnd_container	,i4
	hwnd_focus	,i4
	dll_handle	,i8
endrecord

common
	pick_lc_col	,d3			; mouse local col
	pick_lc_row	,d2			; mouse local row
	pick_lc_wnd_id	,i4			; mouse wnd id
proc

	pick_lc_wnd_id = -9  											; G_ENTNAM is set if returning from another APP
	if (a_flags .BAND. D_AREA_NONCLIENT) freturn true
	ap_misc (MSC_FIRE_INPUT_TIMER)

;	hWnd_container = %w_info(WIF_HWND,WIFH_CONTAINER)							; Adding this code will require that the
;	dll_handle = %DLL_OPEN("user32.dll")									; user be in the Window when they click day
;	if (dll_handle)  begin											; Without it, if the user returns from another 
;		hWnd_focus = DLL_CALL(dll_handle,DLL_TYPE_WINAPI,"GetFocus")					; application they wiull first need to click in
;		DLL_CLOSE(dll_handle)										; this window before their next click is active
;		if (hWnd_container == hWnd_focus) freturn true
;	end

	pick_lc_wnd_id	= a_wndid
	using a_event select
		(D_EVENT_CLOSE), begin					; closed the window
			pick_lc_row = -1
			pick_lc_col = -1
			pick_lc_wnd_id = -1
		end
		(D_EVENT_LEFT_CLICK,D_EVENT_LEFT_DBLCLK), BEGIN		; clicked left button
			pick_lc_row = a_row
			pick_lc_col = a_col
		end
	ENDUSING
	freturn false
endfunction

function pick_year_click ,^val		;mouse click capture from year subscreen in date picker screen
	a_resv1		,a		;reserved parameter
	a_resv2		,a		;reserved parameter

	^val(a_wndid)	,i		;window ID
	^val(a_event)	,i		;event code
	^val(a_col)	,i		;column number
	^val(a_row)	,i		;row number
	^val(a_x)	,i		;x pixel position
	^val(a_y)	,i		;y pixel position
	^val(a_flags)	,i		;flags
endparams


record 
	hwnd_container	,i4
	hwnd_focus	,i4
	dll_handle	,i8
endrecord

common
	pick_lc_col	,d3			; mouse local col
	pick_lc_row	,d2			; mouse local row
	pick_lc_wnd_id	,i4			; mouse wnd id

proc
	if (a_flags .BAND. D_AREA_NONCLIENT) freturn true
	ap_misc (MSC_FIRE_INPUT_TIMER)

	; don't need to check D_EVENT as can only be LeftClick, Dbl LeftClick or Exit, and Exit returns 0 position
	pick_lc_row = a_row
	pick_lc_col = a_col
	pick_lc_wnd_id	= a_wndid

	freturn false

endfunction

function pick_month_click ,^val		;mouse click capture from month subscreen in date picker screen
	a_resv1		,a		;reserved parameter
	a_resv2		,a		;reserved parameter

	^val(a_wndid)	,i		;window ID
	^val(a_event)	,i		;event code
	^val(a_col)	,i		;column number
	^val(a_row)	,i		;row number
	^val(a_x)	,i		;x pixel position
	^val(a_y)	,i		;y pixel position
	^val(a_flags)	,i		;flags
endparams

record 
	hwnd_container	,i4
	hwnd_focus	,i4
	dll_handle	,i8
endrecord

common
	pick_lc_col	,d3			; mouse local col
	pick_lc_row	,d2			; mouse local row
	pick_lc_wnd_id	,i4			; mouse wnd id

proc
	if (a_flags .BAND. D_AREA_NONCLIENT) freturn true
	ap_misc (MSC_FIRE_INPUT_TIMER)

	; don't need to check D_EVENT as can only be LeftClick, Dbl LeftClick or Exit, and Exit returns 0 position
	pick_lc_row = a_row
	pick_lc_col = a_col
	pick_lc_wnd_id	= a_wndid

	freturn false

endfunction


